# Multi-stage Dockerfile for running D-Bus integration tests in a Linux container
# This solves cross-platform SASL authentication issues by running everything in Linux

# Stage 1: Build the Java application
FROM gradle:8.14.2-jdk17 AS builder

# Set encoding environment variables for consistent Java compilation
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

WORKDIR /app
COPY . .

# Build the project and prepare test classes - skip expensive static analysis tasks
# The -Dfile.encoding=UTF-8 ensures consistent encoding regardless of system defaults
RUN gradle compileJava compileTestJava \
    -Dfile.encoding=UTF-8 \
    -x checkstyleMain -x checkstyleTest \
    -x pmdMain -x pmdTest \
    -x jacocoTestReport -x jacocoTestCoverageVerification \
    --no-daemon

# Stage 2: Test execution environment
FROM ubuntu:22.04

# Install required packages and configure locale
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk-headless \
    dbus \
    dbus-x11 \
    netcat-openbsd \
    locales \
    && rm -rf /var/lib/apt/lists/*

# Configure UTF-8 locale to fix Java compilation encoding issues
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen

ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Create test user with specific UID for consistent EXTERNAL auth
RUN useradd -u 1000 -m -s /bin/bash testuser

# Copy built application and dependencies from builder stage
COPY --from=builder /app/lib/build /app/lib/build
COPY --from=builder /app/gradle /app/gradle
COPY --from=builder /app/gradlew /app/
COPY --from=builder /app/gradlew.bat /app/
COPY --from=builder /app/settings.gradle.kts /app/
COPY --from=builder /app/lib/build.gradle.kts /app/lib/
COPY --from=builder /app/lib/src /app/lib/src
COPY --from=builder /root/.gradle /root/.gradle

# Create D-Bus configuration for comprehensive testing
RUN mkdir -p /etc/dbus-1/session.d

# Create D-Bus configuration that supports all authentication mechanisms
COPY <<EOF /etc/dbus-1/test-session.conf
<!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-Bus Bus Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
<busconfig>
  <type>session</type>
  <listen>unix:path=/tmp/dbus-test-socket</listen>
  <listen>tcp:host=127.0.0.1,port=12345</listen>
  
  <!-- Support all authentication mechanisms for comprehensive testing -->
  <auth>EXTERNAL</auth>
  <auth>DBUS_COOKIE_SHA1</auth>
  
  <standard_session_servicedirs />
  
  <!-- Service definitions for basic D-Bus functionality -->
  <servicedir>/usr/share/dbus-1/services</servicedir>
  
  <!-- Policy to allow everything for testing -->
  <policy context="default">
    <allow send_destination="*"/>
    <allow send_interface="*"/>
    <allow receive_sender="*"/>
    <allow receive_interface="*"/>
    <allow own="*"/>
    <allow user="*"/>
    <allow eavesdrop="true"/>
  </policy>
  
  <!-- Allow root user specifically for testing -->
  <policy user="root">
    <allow send_destination="*"/>
    <allow send_interface="*"/>
    <allow receive_sender="*"/>
    <allow receive_interface="*"/>
    <allow own="*"/>
    <allow eavesdrop="true"/>
  </policy>
</busconfig>
EOF

# Create test execution script
COPY <<'EOF' /usr/local/bin/run-dbus-tests.sh
#!/bin/bash
set -e

echo "=== D-Bus Integration Test Execution ==="
echo "Running tests inside Linux container for proper SASL authentication"
echo

# Create machine ID for D-Bus
if [ ! -f /etc/machine-id ]; then
    echo "Creating machine ID..."
    dbus-uuidgen > /etc/machine-id
fi

# Setup D-Bus keyring directory for DBUS_COOKIE_SHA1
mkdir -p ~/.dbus-keyrings
chmod 700 ~/.dbus-keyrings

echo "Starting D-Bus daemon in background..."
dbus-daemon --config-file=/etc/dbus-1/test-session.conf --fork --print-address

# Wait for D-Bus daemon to be ready
echo "Waiting for D-Bus daemon to be ready..."
for i in {1..30}; do
    if netcat -z 127.0.0.1 12345 && [ -S /tmp/dbus-test-socket ]; then
        echo "✓ D-Bus daemon is ready"
        echo "  - TCP socket: 127.0.0.1:12345"
        echo "  - Unix socket: /tmp/dbus-test-socket"
        break
    fi
    sleep 1
done

# Display authentication setup
echo
echo "Authentication setup:"
echo "  - Unix UID: $(id -u)"
echo "  - D-Bus keyrings: $(ls -la ~/.dbus-keyrings/ 2>/dev/null || echo 'None yet')"
echo

# Set environment for tests
export DBUS_SESSION_BUS_ADDRESS="unix:path=/tmp/dbus-test-socket"

# Verify D-Bus daemon is working before running tests
echo "Testing D-Bus daemon connectivity..."
# Test Unix socket connection
if [ -S /tmp/dbus-test-socket ]; then
    echo "✓ Unix socket exists: /tmp/dbus-test-socket"
    # Test if we can connect to D-Bus via Unix socket
    if DBUS_SESSION_BUS_ADDRESS="unix:path=/tmp/dbus-test-socket" dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null | grep -q "array"; then
        echo "✓ D-Bus Unix socket connection successful"
    else
        echo "❌ D-Bus Unix socket connection failed"
    fi
else
    echo "❌ Unix socket not found: /tmp/dbus-test-socket"
fi

# Test TCP connection
if netcat -z 127.0.0.1 12345; then
    echo "✓ TCP port 12345 is listening"
    # Test if we can connect to D-Bus via TCP
    if DBUS_SESSION_BUS_ADDRESS="tcp:host=127.0.0.1,port=12345" dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null | grep -q "array"; then
        echo "✓ D-Bus TCP connection successful"
    else
        echo "❌ D-Bus TCP connection failed"
    fi
else
    echo "❌ TCP port 12345 not listening"
fi

echo ""
echo "D-Bus daemon process info:"
ps aux | grep dbus | grep -v grep || echo "No D-Bus processes found"
echo ""

# Check system architecture and libraries
echo "System architecture and libraries:"
uname -a
echo "Available network libraries:"
ldd /usr/lib/jvm/java-17-openjdk-arm64/bin/java 2>/dev/null | grep -E "(libc|libpthread|libdl)" | head -3 || echo "Could not check system libraries"

# Run the integration tests 
echo "Running integration tests..."
cd /app
export GRADLE_USER_HOME=/root/.gradle
# Ensure UTF-8 encoding for test execution and JVM
./gradlew integrationTest \
    -Dfile.encoding=UTF-8 \
    -Dconsole.encoding=UTF-8 \
    --no-daemon --console=plain

# Since integrationTest task has ignoreFailures=true, we need to check actual test results
# Check if test report exists and parse it for failures
TEST_FAILED=false
FAILURE_DETAILS=""

if [ -f lib/build/reports/tests/integrationTest/index.html ]; then
    echo "✓ Test report generated: lib/build/reports/tests/integrationTest/index.html"
    
    # Check for test failures in the HTML report
    if grep -q "failures.*[1-9]" lib/build/reports/tests/integrationTest/index.html; then
        TEST_FAILED=true
        
        # Extract failure count and details
        FAILURE_COUNT=$(grep -o "failures.*[0-9]" lib/build/reports/tests/integrationTest/index.html | grep -o "[0-9]")
        echo "⚠️  Found $FAILURE_COUNT test failure(s)"
        
        # Try to find specific failed test information
        if [ -d lib/build/reports/tests/integrationTest/classes ]; then
            echo ""
            echo "=== Failed Test Details ==="
            for html_file in lib/build/reports/tests/integrationTest/classes/*.html; do
                if [ -f "$html_file" ] && grep -q "failures" "$html_file"; then
                    # Extract class name from filename
                    class_name=$(basename "$html_file" .html)
                    echo "❌ Failed: $class_name"
                    
                    # Try to extract failure message from the HTML
                    if grep -q "testBasicConnectionLifecycle" "$html_file"; then
                        echo "   Test: testBasicConnectionLifecycle()"
                        # Extract failure reason if possible
                        failure_text=$(grep -A 20 "failure" "$html_file" | head -5 | sed 's/<[^>]*>//g' | sed 's/&[^;]*;//g' | grep -v "^$" | head -2)
                        if [ -n "$failure_text" ]; then
                            echo "   Reason: $failure_text"
                        fi
                    fi
                fi
            done
        fi
    fi
    
    # Also check for 0% success rate as additional indicator
    if grep -q "0%" lib/build/reports/tests/integrationTest/index.html; then
        TEST_FAILED=true
    fi
else
    echo "❌ Test report not found - tests may have failed to run"
    TEST_FAILED=true
fi

# Display test results summary
echo
echo "=== Test Results Summary ==="

# Keep D-Bus logs available for debugging
echo
echo "=== D-Bus Process Status ==="
ps aux | grep dbus | grep -v grep || echo "No D-Bus processes found"

# Show detailed test failure information
if [ "$TEST_FAILED" = true ]; then
    echo
    echo "=== Detailed Test Failure Analysis ==="
    
    # Try to extract more details from test report files
    if [ -d lib/build/reports/tests/integrationTest/classes ]; then
        for html_file in lib/build/reports/tests/integrationTest/classes/*.html; do
            if [ -f "$html_file" ] && grep -q "FAILED" "$html_file"; then
                echo "Extracting failure details from: $(basename "$html_file")"
                # Extract the test failure content
                grep -A 30 -B 5 "FAILED\|Exception\|Error" "$html_file" | sed 's/<[^>]*>//g' | sed 's/&[^;]*;//g' | grep -v "^$" | head -20
                echo "---"
            fi
        done
    fi
    
    # Also check for any log files that might contain more details
    if [ -d lib/build/test-results/integrationTest ]; then
        echo "Test result XML files:"
        for xml_file in lib/build/test-results/integrationTest/*.xml; do
            if [ -f "$xml_file" ]; then
                echo "Content of $(basename "$xml_file"):"
                grep -A 10 -B 2 "failure\|error" "$xml_file" | head -15
                echo "---"
            fi
        done
    fi
fi

# Exit with proper code based on actual test results
echo
if [ "$TEST_FAILED" = true ]; then
    echo "❌ Integration tests failed"
    if [ -n "$FAILURE_DETAILS" ]; then
        echo "   $FAILURE_DETAILS"
    fi
    echo "📋 Check the detailed output above for specific failure information"
    exit 1
else
    echo "✅ All integration tests passed successfully!"
    exit 0
fi
EOF

RUN chmod +x /usr/local/bin/run-dbus-tests.sh

# Stay as root to avoid permission issues with Gradle
# D-Bus daemon will run as root but allow connections from any user
WORKDIR /app

# Expose ports for external access if needed
EXPOSE 12345

# Default command runs the tests
CMD ["/usr/local/bin/run-dbus-tests.sh"]